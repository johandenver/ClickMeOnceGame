{"version":3,"sources":["Components/Navbar/index.js","Components/Jumbotron/index.js","Components/Footer/index.js","App.js","serviceWorker.js","index.js"],"names":["Nav","react_default","a","createElement","className","href","this","props","message","score","highScore","React","Component","Header","Footer","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","shuffleCharachters","shuffledChars","state","chars","sort","Math","random","setState","handleCharClick","id","i","console","log","selectedChar","newCharsArray","_this$state","clicked","sChars","forEach","char","splice","newScore","newHighScore","_this2","Navbar","Jumbotron","map","key","onClick","src","concat","image","alt","name","Components_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.64872014.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nclass Nav extends React.Component {\n  render() {\n    return (\n      <nav className=\"navbar navbar-expand-lg navbar-fixed-top\">\n        <ul className=\"nav-items\">\n          <li className=\"navbar-brand\">\n            <a className=\"logo\" href=\"/\">\n              Jedi Mind Tricks!\n            </a>\n          </li>\n          {/* pass in props to the message and the scores */}\n          <li className=\"navbar-brand message\">{this.props.message}</li>\n          <li className=\"navbar-brand score\">Score: {this.props.score}</li>\n          <li className=\"navbar-brand high-score\">\n            High Score: {this.props.highScore}\n          </li>\n        </ul>\n      </nav>\n    );\n  }\n}\n\nexport default Nav;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Header() {\n  return (\n    <div className=\"header\">\n      <div className=\"container header-content\">\n        <h3 className=\"display-4\">Clear your mind Jedi!</h3>\n        <p className=\"lead\">\n          Don't click on the same image twice! Score goes up if you click on\n          images once, down if you click on it again.\n        </p>\n      </div>\n    </div>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Footer() {\n  return (\n    <footer className=\"footer navbar-fixed-bottom mt-auto py-3\">\n      <div className=\"container\">\n        <span className=\"footer-content\">May The Force be with You!!</span>\n      </div>\n    </footer>\n  );\n}\n\nexport default Footer;\n","import React from \"react\";\nimport Nav from \"./Components/Navbar\";\nimport Header from \"./Components/Jumbotron\";\nimport Footer from \"./Components/Footer\";\nimport sChars from \"./chars.json\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      chars: sChars,\n      message: \"Play the Game you will! \",\n      score: 0,\n      highScore: 0\n    };\n    // const charsClone = sChars;\n  }\n\n  componentWillMount() {\n    this.shuffleCharachters();\n  }\n\n  // function to shuffle the images\n  shuffleCharachters = () => {\n    const shuffledChars = this.state.chars.sort(() => Math.random() - 0.5);\n    this.setState({\n      chars: shuffledChars\n    });\n  };\n\n  // function to handle the click on the charachter images\n  handleCharClick = (id, i) => {\n    console.log(i);\n    console.log(id);\n    let selectedChar = this.state.chars[i];\n    let newCharsArray = this.state.chars;\n    const { score, highScore } = this.state;\n\n    if (!selectedChar.clicked) {\n      console.log(\"user is correct\");\n      selectedChar.clicked = true;\n      newCharsArray.splice(i, 1, selectedChar);\n      let newScore = score + 1;\n      let newHighScore = newScore > highScore ? newScore : highScore;\n\n      this.setState({\n        chars: newCharsArray,\n        score: newScore,\n        highScore: newHighScore,\n        message: \"Correct, the Force is strong with you!\"\n      });\n      this.shuffleCharachters();\n    } else {\n      console.log(\"incorrect\");\n      sChars.forEach(char => {\n        char.clicked = false;\n      });\n      this.setState({\n        chars: sChars,\n        score: 0,\n        message: \"Incorrect, let the Force flow next time!\"\n      });\n      this.shuffleCharachters();\n    }\n  };\n  // render function\n  render() {\n    return (\n      <div className=\"App\">\n        <header>\n          <Nav\n            message={this.state.message}\n            score={this.state.score}\n            highScore={this.state.highScore}\n          />\n        </header>\n        <main className=\"main-body\">\n          <Header />\n          <div className=\"row char-area\">\n            {/* map through the cards to render to the page */}\n            {this.state.chars.map((char, i) => (\n              <div\n                className=\"card\"\n                key={char.id}\n                onClick={() => this.handleCharClick(char.id, i)}\n              >\n                <img\n                  src={`./Images/${char.image}`}\n                  alt={char.name}\n                  className=\"char\"\n                />\n              </div>\n            ))}\n          </div>\n        </main>\n\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}